1. writing sequence/order of the routes matter while using the app.use("/", (req, res) => {}) method

2. by default, when you write any url on the top of the browser that's make a get api call

3. app.use("/hello", (req, res) => { // it will cover anything that comes after /hello and any request like get, post, delete...
    res.send("Hello from SERVER");
});

4. /ac, /abc --> b is optional
app.get("/ab?c", (req, res) => {})

5. /abc, /abbc --> a and c is at first and last, b is regex (b, bb, bbbbbb, any number of b)
app.get("/ab+c", (req, res) => {})

6. /abcd, /ab(anything)cd --> starts with ab (anything) end with cd 
app.get("/ab*cd", (req, res) => {})

7. app.get("/a(bc)*d", ) --> bc combined any no. of time optional

8. app.get("/.*fly$/", ) --> ends with fly starts with anything

9. app.get("/user", (req, res) => {}) 
http://localhost:1234/user?userId=101&password="testing" 
// console.log(req.query); //{ userId: '101', password: 'testing' }

10. app.get("/user/:userId/:name/:password", (req, res) => {})
http://localhost:1234/user/101/modi/testing
console.log(req.params); //{ userId: '101', name: 'modi', password: 'testing' }

lec --> 18 Middlewares & Error Handeling
GET /users => middleware chain => request handler
app.get("/user",
    (req, res, next) => {
        console.log("Handeling /user route"); 
        next();
    },
    (req, res, next) => {
        res.send("1st Route Handeler");
    }
);

----------- lec-> 18[Middlewares & ErrorHandlers] -----------
const { adminAuth, userAuth } = require("./middlewares/auth");

// Handle Auth Middleware for all GET, POST, PUT, DELETE
app.use("/admin", adminAuth);

app.post("/user/login", (req, res) => {
    res.send("User logged in successfully");
});

app.get("/user/data", userAuth, (req, res) => {
    res.send("User Data Sent");
});

app.get("/admin/getAllData", (req, res) => {
    res.send("All Data Sent");
});

app.get("/admin/deleteUser", (req, res) => {
    res.send("Deleted a user");
});

app.get("/getUserData", (req, res) => {
    try {
        // logic of DB call and get user data

        throw new Error("hello ji");
        res.send("User Data Sent");
    } catch (err) {
        res.status(500).send("Some Error -> contact Support Team");
    }
});

// here it is used as wildCard for matching all routes
app.use("/", (err, req, res, next) => { 
    if (err) {
        // Log your errors
        res.status(500).send("Something went wrong");
    }
});

-- lec -> 23. (Authentication, JWT & Cookies)
// Requesting to view own profile (before middleware)
app.get("/profile", async (req, res) => {
    try {
        const cookies = req.cookies;

        const { tokenShubham } = cookies;
        if (!tokenShubham) {
            throw new Error("Invalid Token");
        }
        // Validate my token
        const decodedMessage = await jwt.verify(tokenShubham, "ShubhamDevMeet$108");
        
        const user = await User.findById(decodedMessage._id);
        if (!user) {
            throw new Error("User does not exist");
        }
        res.send(user);
    } catch (err) {
        res.status(400).send("ERROR : " + err.message);
    }
});

---some old api---
// get user by there email
app.get("/user", async (req, res) => {
    const userEmail = req.body.emailId;
    try{
        const users = await User.find({emailId: userEmail});
        if(users.length === 0) {
            res.status(404).send("User not found");
        }else{
            res.send(users);
        }
    }catch(err){
        res.status(400).send("Sonething went wrong");
    }
});

// geed API GET /feed - get all the user form the database
app.get("/feed", async (req, res) => {
    try{
        const users = await User.find({});
        res.send(users);
    }catch(err){
        res.status(400).send("Something went wrong");
    }
})

// deleting a user by there id 
app.delete("/user", async (req, res) => {
    const userId = req.body.userId;

    try{
        const user = await User.findByIdAndDelete(userId);
        res.send(user);
    }catch(err){
        res.status(400).send("User not found");
    }
})

// updating a user
app.patch("/user/:userId", async (req, res) => {
    const userId = req.params?.userId;
    const data = req.body;
    try {
        const ALLOWED_UPDATES = ["photoUrl", "about", "gender", "age", "skills"];

        const isUpdateAllowed = Object.keys(data).every((k) => ALLOWED_UPDATES.includes(k));
        if (!isUpdateAllowed) { throw new Error("Update Not Allowed"); }
        if (data?.skills.length > 10) { throw new Error("Skills cannot be more then 10"); }
        const user = await User.findByIdAndUpdate({_id: userId}, data, {returnDocument: "before", runValidators: true, });
        console.log(user);
        if (user === null) { throw new Error("User Not Found With id: " + userId) }
        res.send("User updated successfully");
    }catch(err){
        res.status(400).send("UPDATE FAILED: " + err.message);
    }
})